// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: proto/rpc/main.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Service_AddMemberLoginStatus_FullMethodName           = "/main.Service/AddMemberLoginStatus"
	Service_UpdateMemberLogoutStatus_FullMethodName       = "/main.Service/UpdateMemberLogoutStatus"
	Service_QueryMemberLoginStatusDetail_FullMethodName   = "/main.Service/QueryMemberLoginStatusDetail"
	Service_QueryPageMemberLoginStatusList_FullMethodName = "/main.Service/QueryPageMemberLoginStatusList"
	Service_QueryMemberLoginStatusList_FullMethodName     = "/main.Service/QueryMemberLoginStatusList"
)

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceClient interface {
	// 添加用户登录状态
	AddMemberLoginStatus(ctx context.Context, in *AddMemberLoginStatusReq, opts ...grpc.CallOption) (*AddMemberLoginStatusResp, error)
	// 更新用户登录状态
	UpdateMemberLogoutStatus(ctx context.Context, in *UpdateMemberLogoutStatusReq, opts ...grpc.CallOption) (*UpdateMemberLogoutStatusResp, error)
	// 查询用户登录状态详情
	QueryMemberLoginStatusDetail(ctx context.Context, in *QueryMemberLoginStatusDetailReq, opts ...grpc.CallOption) (*QueryMemberLoginStatusDetailResp, error)
	// 查询用户登录状态分页列表
	QueryPageMemberLoginStatusList(ctx context.Context, in *QueryPageMemberLoginStatusListReq, opts ...grpc.CallOption) (*QueryPageMemberLoginStatusListResp, error)
	// 查询用户登录状态所有列表
	QueryMemberLoginStatusList(ctx context.Context, in *QueryMemberLoginStatusListReq, opts ...grpc.CallOption) (*QueryMemberLoginStatusListResp, error)
}

type serviceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceClient(cc grpc.ClientConnInterface) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) AddMemberLoginStatus(ctx context.Context, in *AddMemberLoginStatusReq, opts ...grpc.CallOption) (*AddMemberLoginStatusResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddMemberLoginStatusResp)
	err := c.cc.Invoke(ctx, Service_AddMemberLoginStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) UpdateMemberLogoutStatus(ctx context.Context, in *UpdateMemberLogoutStatusReq, opts ...grpc.CallOption) (*UpdateMemberLogoutStatusResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateMemberLogoutStatusResp)
	err := c.cc.Invoke(ctx, Service_UpdateMemberLogoutStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) QueryMemberLoginStatusDetail(ctx context.Context, in *QueryMemberLoginStatusDetailReq, opts ...grpc.CallOption) (*QueryMemberLoginStatusDetailResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryMemberLoginStatusDetailResp)
	err := c.cc.Invoke(ctx, Service_QueryMemberLoginStatusDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) QueryPageMemberLoginStatusList(ctx context.Context, in *QueryPageMemberLoginStatusListReq, opts ...grpc.CallOption) (*QueryPageMemberLoginStatusListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryPageMemberLoginStatusListResp)
	err := c.cc.Invoke(ctx, Service_QueryPageMemberLoginStatusList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) QueryMemberLoginStatusList(ctx context.Context, in *QueryMemberLoginStatusListReq, opts ...grpc.CallOption) (*QueryMemberLoginStatusListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryMemberLoginStatusListResp)
	err := c.cc.Invoke(ctx, Service_QueryMemberLoginStatusList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceServer is the server API for Service service.
// All implementations must embed UnimplementedServiceServer
// for forward compatibility.
type ServiceServer interface {
	// 添加用户登录状态
	AddMemberLoginStatus(context.Context, *AddMemberLoginStatusReq) (*AddMemberLoginStatusResp, error)
	// 更新用户登录状态
	UpdateMemberLogoutStatus(context.Context, *UpdateMemberLogoutStatusReq) (*UpdateMemberLogoutStatusResp, error)
	// 查询用户登录状态详情
	QueryMemberLoginStatusDetail(context.Context, *QueryMemberLoginStatusDetailReq) (*QueryMemberLoginStatusDetailResp, error)
	// 查询用户登录状态分页列表
	QueryPageMemberLoginStatusList(context.Context, *QueryPageMemberLoginStatusListReq) (*QueryPageMemberLoginStatusListResp, error)
	// 查询用户登录状态所有列表
	QueryMemberLoginStatusList(context.Context, *QueryMemberLoginStatusListReq) (*QueryMemberLoginStatusListResp, error)
	mustEmbedUnimplementedServiceServer()
}

// UnimplementedServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedServiceServer struct{}

func (UnimplementedServiceServer) AddMemberLoginStatus(context.Context, *AddMemberLoginStatusReq) (*AddMemberLoginStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMemberLoginStatus not implemented")
}
func (UnimplementedServiceServer) UpdateMemberLogoutStatus(context.Context, *UpdateMemberLogoutStatusReq) (*UpdateMemberLogoutStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMemberLogoutStatus not implemented")
}
func (UnimplementedServiceServer) QueryMemberLoginStatusDetail(context.Context, *QueryMemberLoginStatusDetailReq) (*QueryMemberLoginStatusDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMemberLoginStatusDetail not implemented")
}
func (UnimplementedServiceServer) QueryPageMemberLoginStatusList(context.Context, *QueryPageMemberLoginStatusListReq) (*QueryPageMemberLoginStatusListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPageMemberLoginStatusList not implemented")
}
func (UnimplementedServiceServer) QueryMemberLoginStatusList(context.Context, *QueryMemberLoginStatusListReq) (*QueryMemberLoginStatusListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMemberLoginStatusList not implemented")
}
func (UnimplementedServiceServer) mustEmbedUnimplementedServiceServer() {}
func (UnimplementedServiceServer) testEmbeddedByValue()                 {}

// UnsafeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceServer will
// result in compilation errors.
type UnsafeServiceServer interface {
	mustEmbedUnimplementedServiceServer()
}

func RegisterServiceServer(s grpc.ServiceRegistrar, srv ServiceServer) {
	// If the following call pancis, it indicates UnimplementedServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Service_ServiceDesc, srv)
}

func _Service_AddMemberLoginStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMemberLoginStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AddMemberLoginStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_AddMemberLoginStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AddMemberLoginStatus(ctx, req.(*AddMemberLoginStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_UpdateMemberLogoutStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMemberLogoutStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).UpdateMemberLogoutStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_UpdateMemberLogoutStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).UpdateMemberLogoutStatus(ctx, req.(*UpdateMemberLogoutStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_QueryMemberLoginStatusDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMemberLoginStatusDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).QueryMemberLoginStatusDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_QueryMemberLoginStatusDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).QueryMemberLoginStatusDetail(ctx, req.(*QueryMemberLoginStatusDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_QueryPageMemberLoginStatusList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPageMemberLoginStatusListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).QueryPageMemberLoginStatusList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_QueryPageMemberLoginStatusList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).QueryPageMemberLoginStatusList(ctx, req.(*QueryPageMemberLoginStatusListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_QueryMemberLoginStatusList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMemberLoginStatusListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).QueryMemberLoginStatusList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_QueryMemberLoginStatusList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).QueryMemberLoginStatusList(ctx, req.(*QueryMemberLoginStatusListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Service_ServiceDesc is the grpc.ServiceDesc for Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddMemberLoginStatus",
			Handler:    _Service_AddMemberLoginStatus_Handler,
		},
		{
			MethodName: "UpdateMemberLogoutStatus",
			Handler:    _Service_UpdateMemberLogoutStatus_Handler,
		},
		{
			MethodName: "QueryMemberLoginStatusDetail",
			Handler:    _Service_QueryMemberLoginStatusDetail_Handler,
		},
		{
			MethodName: "QueryPageMemberLoginStatusList",
			Handler:    _Service_QueryPageMemberLoginStatusList_Handler,
		},
		{
			MethodName: "QueryMemberLoginStatusList",
			Handler:    _Service_QueryMemberLoginStatusList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/rpc/main.proto",
}
