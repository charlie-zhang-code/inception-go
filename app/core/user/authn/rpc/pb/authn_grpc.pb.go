// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: proto/rpc/authn.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	JwtToken_GetJwtTokenByUsernamePassword_FullMethodName = "/authn.JwtToken/GetJwtTokenByUsernamePassword"
	JwtToken_GetJwtTokenByRefreshToken_FullMethodName     = "/authn.JwtToken/GetJwtTokenByRefreshToken"
	JwtToken_CheckJwtToken_FullMethodName                 = "/authn.JwtToken/CheckJwtToken"
)

// JwtTokenClient is the client API for JwtToken service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// jwt token
type JwtTokenClient interface {
	// 通过用户名密码获取 jwt token
	GetJwtTokenByUsernamePassword(ctx context.Context, in *UsernamePasswordReq, opts ...grpc.CallOption) (*JwtTokenResp, error)
	// 通过刷新令牌获取 jwt token
	GetJwtTokenByRefreshToken(ctx context.Context, in *JwtRefreshTokenReq, opts ...grpc.CallOption) (*JwtTokenResp, error)
	// 校验 jwt token
	CheckJwtToken(ctx context.Context, in *CheckJwtTokenReq, opts ...grpc.CallOption) (*CheckJwtTokenResp, error)
}

type jwtTokenClient struct {
	cc grpc.ClientConnInterface
}

func NewJwtTokenClient(cc grpc.ClientConnInterface) JwtTokenClient {
	return &jwtTokenClient{cc}
}

func (c *jwtTokenClient) GetJwtTokenByUsernamePassword(ctx context.Context, in *UsernamePasswordReq, opts ...grpc.CallOption) (*JwtTokenResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JwtTokenResp)
	err := c.cc.Invoke(ctx, JwtToken_GetJwtTokenByUsernamePassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jwtTokenClient) GetJwtTokenByRefreshToken(ctx context.Context, in *JwtRefreshTokenReq, opts ...grpc.CallOption) (*JwtTokenResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JwtTokenResp)
	err := c.cc.Invoke(ctx, JwtToken_GetJwtTokenByRefreshToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jwtTokenClient) CheckJwtToken(ctx context.Context, in *CheckJwtTokenReq, opts ...grpc.CallOption) (*CheckJwtTokenResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckJwtTokenResp)
	err := c.cc.Invoke(ctx, JwtToken_CheckJwtToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JwtTokenServer is the server API for JwtToken service.
// All implementations must embed UnimplementedJwtTokenServer
// for forward compatibility.
//
// jwt token
type JwtTokenServer interface {
	// 通过用户名密码获取 jwt token
	GetJwtTokenByUsernamePassword(context.Context, *UsernamePasswordReq) (*JwtTokenResp, error)
	// 通过刷新令牌获取 jwt token
	GetJwtTokenByRefreshToken(context.Context, *JwtRefreshTokenReq) (*JwtTokenResp, error)
	// 校验 jwt token
	CheckJwtToken(context.Context, *CheckJwtTokenReq) (*CheckJwtTokenResp, error)
	mustEmbedUnimplementedJwtTokenServer()
}

// UnimplementedJwtTokenServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedJwtTokenServer struct{}

func (UnimplementedJwtTokenServer) GetJwtTokenByUsernamePassword(context.Context, *UsernamePasswordReq) (*JwtTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJwtTokenByUsernamePassword not implemented")
}
func (UnimplementedJwtTokenServer) GetJwtTokenByRefreshToken(context.Context, *JwtRefreshTokenReq) (*JwtTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJwtTokenByRefreshToken not implemented")
}
func (UnimplementedJwtTokenServer) CheckJwtToken(context.Context, *CheckJwtTokenReq) (*CheckJwtTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckJwtToken not implemented")
}
func (UnimplementedJwtTokenServer) mustEmbedUnimplementedJwtTokenServer() {}
func (UnimplementedJwtTokenServer) testEmbeddedByValue()                  {}

// UnsafeJwtTokenServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JwtTokenServer will
// result in compilation errors.
type UnsafeJwtTokenServer interface {
	mustEmbedUnimplementedJwtTokenServer()
}

func RegisterJwtTokenServer(s grpc.ServiceRegistrar, srv JwtTokenServer) {
	// If the following call pancis, it indicates UnimplementedJwtTokenServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&JwtToken_ServiceDesc, srv)
}

func _JwtToken_GetJwtTokenByUsernamePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsernamePasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JwtTokenServer).GetJwtTokenByUsernamePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JwtToken_GetJwtTokenByUsernamePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JwtTokenServer).GetJwtTokenByUsernamePassword(ctx, req.(*UsernamePasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _JwtToken_GetJwtTokenByRefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JwtRefreshTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JwtTokenServer).GetJwtTokenByRefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JwtToken_GetJwtTokenByRefreshToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JwtTokenServer).GetJwtTokenByRefreshToken(ctx, req.(*JwtRefreshTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _JwtToken_CheckJwtToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckJwtTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JwtTokenServer).CheckJwtToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JwtToken_CheckJwtToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JwtTokenServer).CheckJwtToken(ctx, req.(*CheckJwtTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

// JwtToken_ServiceDesc is the grpc.ServiceDesc for JwtToken service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JwtToken_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "authn.JwtToken",
	HandlerType: (*JwtTokenServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetJwtTokenByUsernamePassword",
			Handler:    _JwtToken_GetJwtTokenByUsernamePassword_Handler,
		},
		{
			MethodName: "GetJwtTokenByRefreshToken",
			Handler:    _JwtToken_GetJwtTokenByRefreshToken_Handler,
		},
		{
			MethodName: "CheckJwtToken",
			Handler:    _JwtToken_CheckJwtToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/rpc/authn.proto",
}

const (
	OpaqueToken_GetOpaqueTokenByUsernamePassword_FullMethodName = "/authn.OpaqueToken/GetOpaqueTokenByUsernamePassword"
	OpaqueToken_GetOpaqueTokenByRefreshToken_FullMethodName     = "/authn.OpaqueToken/GetOpaqueTokenByRefreshToken"
	OpaqueToken_CheckOpaqueToken_FullMethodName                 = "/authn.OpaqueToken/CheckOpaqueToken"
)

// OpaqueTokenClient is the client API for OpaqueToken service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 不透明token
type OpaqueTokenClient interface {
	// 通过用户名密码获取 opaque token
	GetOpaqueTokenByUsernamePassword(ctx context.Context, in *UsernamePasswordReq, opts ...grpc.CallOption) (*OpaqueTokenResp, error)
	// 通过刷新令牌获取 opaque token
	GetOpaqueTokenByRefreshToken(ctx context.Context, in *OpaqueRefreshTokenReq, opts ...grpc.CallOption) (*OpaqueTokenResp, error)
	// 校验 opaque token
	CheckOpaqueToken(ctx context.Context, in *CheckOpaqueTokenReq, opts ...grpc.CallOption) (*OpaqueTokenResp, error)
}

type opaqueTokenClient struct {
	cc grpc.ClientConnInterface
}

func NewOpaqueTokenClient(cc grpc.ClientConnInterface) OpaqueTokenClient {
	return &opaqueTokenClient{cc}
}

func (c *opaqueTokenClient) GetOpaqueTokenByUsernamePassword(ctx context.Context, in *UsernamePasswordReq, opts ...grpc.CallOption) (*OpaqueTokenResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OpaqueTokenResp)
	err := c.cc.Invoke(ctx, OpaqueToken_GetOpaqueTokenByUsernamePassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opaqueTokenClient) GetOpaqueTokenByRefreshToken(ctx context.Context, in *OpaqueRefreshTokenReq, opts ...grpc.CallOption) (*OpaqueTokenResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OpaqueTokenResp)
	err := c.cc.Invoke(ctx, OpaqueToken_GetOpaqueTokenByRefreshToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opaqueTokenClient) CheckOpaqueToken(ctx context.Context, in *CheckOpaqueTokenReq, opts ...grpc.CallOption) (*OpaqueTokenResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OpaqueTokenResp)
	err := c.cc.Invoke(ctx, OpaqueToken_CheckOpaqueToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OpaqueTokenServer is the server API for OpaqueToken service.
// All implementations must embed UnimplementedOpaqueTokenServer
// for forward compatibility.
//
// 不透明token
type OpaqueTokenServer interface {
	// 通过用户名密码获取 opaque token
	GetOpaqueTokenByUsernamePassword(context.Context, *UsernamePasswordReq) (*OpaqueTokenResp, error)
	// 通过刷新令牌获取 opaque token
	GetOpaqueTokenByRefreshToken(context.Context, *OpaqueRefreshTokenReq) (*OpaqueTokenResp, error)
	// 校验 opaque token
	CheckOpaqueToken(context.Context, *CheckOpaqueTokenReq) (*OpaqueTokenResp, error)
	mustEmbedUnimplementedOpaqueTokenServer()
}

// UnimplementedOpaqueTokenServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOpaqueTokenServer struct{}

func (UnimplementedOpaqueTokenServer) GetOpaqueTokenByUsernamePassword(context.Context, *UsernamePasswordReq) (*OpaqueTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOpaqueTokenByUsernamePassword not implemented")
}
func (UnimplementedOpaqueTokenServer) GetOpaqueTokenByRefreshToken(context.Context, *OpaqueRefreshTokenReq) (*OpaqueTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOpaqueTokenByRefreshToken not implemented")
}
func (UnimplementedOpaqueTokenServer) CheckOpaqueToken(context.Context, *CheckOpaqueTokenReq) (*OpaqueTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckOpaqueToken not implemented")
}
func (UnimplementedOpaqueTokenServer) mustEmbedUnimplementedOpaqueTokenServer() {}
func (UnimplementedOpaqueTokenServer) testEmbeddedByValue()                     {}

// UnsafeOpaqueTokenServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OpaqueTokenServer will
// result in compilation errors.
type UnsafeOpaqueTokenServer interface {
	mustEmbedUnimplementedOpaqueTokenServer()
}

func RegisterOpaqueTokenServer(s grpc.ServiceRegistrar, srv OpaqueTokenServer) {
	// If the following call pancis, it indicates UnimplementedOpaqueTokenServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OpaqueToken_ServiceDesc, srv)
}

func _OpaqueToken_GetOpaqueTokenByUsernamePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsernamePasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpaqueTokenServer).GetOpaqueTokenByUsernamePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OpaqueToken_GetOpaqueTokenByUsernamePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpaqueTokenServer).GetOpaqueTokenByUsernamePassword(ctx, req.(*UsernamePasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpaqueToken_GetOpaqueTokenByRefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpaqueRefreshTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpaqueTokenServer).GetOpaqueTokenByRefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OpaqueToken_GetOpaqueTokenByRefreshToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpaqueTokenServer).GetOpaqueTokenByRefreshToken(ctx, req.(*OpaqueRefreshTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpaqueToken_CheckOpaqueToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckOpaqueTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpaqueTokenServer).CheckOpaqueToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OpaqueToken_CheckOpaqueToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpaqueTokenServer).CheckOpaqueToken(ctx, req.(*CheckOpaqueTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

// OpaqueToken_ServiceDesc is the grpc.ServiceDesc for OpaqueToken service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OpaqueToken_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "authn.OpaqueToken",
	HandlerType: (*OpaqueTokenServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOpaqueTokenByUsernamePassword",
			Handler:    _OpaqueToken_GetOpaqueTokenByUsernamePassword_Handler,
		},
		{
			MethodName: "GetOpaqueTokenByRefreshToken",
			Handler:    _OpaqueToken_GetOpaqueTokenByRefreshToken_Handler,
		},
		{
			MethodName: "CheckOpaqueToken",
			Handler:    _OpaqueToken_CheckOpaqueToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/rpc/authn.proto",
}
