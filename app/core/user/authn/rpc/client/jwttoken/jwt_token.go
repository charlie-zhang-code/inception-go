// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3
// Source: authn.proto

package jwttoken

import (
	"context"

	"authn/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CheckJwtTokenReq      = pb.CheckJwtTokenReq
	CheckJwtTokenResp     = pb.CheckJwtTokenResp
	CheckOpaqueTokenReq   = pb.CheckOpaqueTokenReq
	JwtRefreshTokenReq    = pb.JwtRefreshTokenReq
	JwtTokenResp          = pb.JwtTokenResp
	OpaqueRefreshTokenReq = pb.OpaqueRefreshTokenReq
	OpaqueTokenResp       = pb.OpaqueTokenResp
	UsernamePasswordReq   = pb.UsernamePasswordReq

	JwtToken interface {
		// 通过用户名密码获取 jwt token
		GetJwtTokenByUsernamePassword(ctx context.Context, in *UsernamePasswordReq, opts ...grpc.CallOption) (*JwtTokenResp, error)
		// 通过刷新令牌获取 jwt token
		GetJwtTokenByRefreshToken(ctx context.Context, in *JwtRefreshTokenReq, opts ...grpc.CallOption) (*JwtTokenResp, error)
		// 校验 jwt token
		CheckJwtToken(ctx context.Context, in *CheckJwtTokenReq, opts ...grpc.CallOption) (*CheckJwtTokenResp, error)
	}

	defaultJwtToken struct {
		cli zrpc.Client
	}
)

func NewJwtToken(cli zrpc.Client) JwtToken {
	return &defaultJwtToken{
		cli: cli,
	}
}

// 通过用户名密码获取 jwt token
func (m *defaultJwtToken) GetJwtTokenByUsernamePassword(ctx context.Context, in *UsernamePasswordReq, opts ...grpc.CallOption) (*JwtTokenResp, error) {
	client := pb.NewJwtTokenClient(m.cli.Conn())
	return client.GetJwtTokenByUsernamePassword(ctx, in, opts...)
}

// 通过刷新令牌获取 jwt token
func (m *defaultJwtToken) GetJwtTokenByRefreshToken(ctx context.Context, in *JwtRefreshTokenReq, opts ...grpc.CallOption) (*JwtTokenResp, error) {
	client := pb.NewJwtTokenClient(m.cli.Conn())
	return client.GetJwtTokenByRefreshToken(ctx, in, opts...)
}

// 校验 jwt token
func (m *defaultJwtToken) CheckJwtToken(ctx context.Context, in *CheckJwtTokenReq, opts ...grpc.CallOption) (*CheckJwtTokenResp, error) {
	client := pb.NewJwtTokenClient(m.cli.Conn())
	return client.CheckJwtToken(ctx, in, opts...)
}
