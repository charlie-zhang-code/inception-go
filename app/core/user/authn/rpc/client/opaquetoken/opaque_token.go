// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3
// Source: authn.proto

package opaquetoken

import (
	"context"

	"authn/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CheckJwtTokenReq      = pb.CheckJwtTokenReq
	CheckJwtTokenResp     = pb.CheckJwtTokenResp
	CheckOpaqueTokenReq   = pb.CheckOpaqueTokenReq
	JwtRefreshTokenReq    = pb.JwtRefreshTokenReq
	JwtTokenResp          = pb.JwtTokenResp
	OpaqueRefreshTokenReq = pb.OpaqueRefreshTokenReq
	OpaqueTokenResp       = pb.OpaqueTokenResp
	UsernamePasswordReq   = pb.UsernamePasswordReq

	OpaqueToken interface {
		// 通过用户名密码获取 opaque token
		GetOpaqueTokenByUsernamePassword(ctx context.Context, in *UsernamePasswordReq, opts ...grpc.CallOption) (*OpaqueTokenResp, error)
		// 通过刷新令牌获取 opaque token
		GetOpaqueTokenByRefreshToken(ctx context.Context, in *OpaqueRefreshTokenReq, opts ...grpc.CallOption) (*OpaqueTokenResp, error)
		// 校验 opaque token
		CheckOpaqueToken(ctx context.Context, in *CheckOpaqueTokenReq, opts ...grpc.CallOption) (*OpaqueTokenResp, error)
	}

	defaultOpaqueToken struct {
		cli zrpc.Client
	}
)

func NewOpaqueToken(cli zrpc.Client) OpaqueToken {
	return &defaultOpaqueToken{
		cli: cli,
	}
}

// 通过用户名密码获取 opaque token
func (m *defaultOpaqueToken) GetOpaqueTokenByUsernamePassword(ctx context.Context, in *UsernamePasswordReq, opts ...grpc.CallOption) (*OpaqueTokenResp, error) {
	client := pb.NewOpaqueTokenClient(m.cli.Conn())
	return client.GetOpaqueTokenByUsernamePassword(ctx, in, opts...)
}

// 通过刷新令牌获取 opaque token
func (m *defaultOpaqueToken) GetOpaqueTokenByRefreshToken(ctx context.Context, in *OpaqueRefreshTokenReq, opts ...grpc.CallOption) (*OpaqueTokenResp, error) {
	client := pb.NewOpaqueTokenClient(m.cli.Conn())
	return client.GetOpaqueTokenByRefreshToken(ctx, in, opts...)
}

// 校验 opaque token
func (m *defaultOpaqueToken) CheckOpaqueToken(ctx context.Context, in *CheckOpaqueTokenReq, opts ...grpc.CallOption) (*OpaqueTokenResp, error) {
	client := pb.NewOpaqueTokenClient(m.cli.Conn())
	return client.CheckOpaqueToken(ctx, in, opts...)
}
