syntax = "proto3";

package authn;

option go_package = "./pb";

message UsernamePasswordReq {
  string username = 1; //用户登录时使用的用户名
  string password = 2; //用户账户的密码，应存储加密后的值
  string client = 3;
}

message JwtRefreshTokenReq {
  string refresh_token = 1; //刷新令牌
  string client = 2;
}

message JwtTokenResp {
  string access_token = 1; // 访问令牌
  string refresh_token = 2; // 刷新令牌
  string refresh_after = 3; // 客户端刷新访问令牌的时间点
  string access_expire = 4; // 访问令牌的有效期
  string refresh_expire = 5; // 刷新令牌的有效期
  string client = 6; // 客户端标识
}

message CheckJwtTokenReq {
  string token = 1;
}

message CheckJwtTokenResp {
  bool success = 1;
}

// jwt token
service JwtToken {
  // 通过用户名密码获取 jwt token
  rpc GetJwtTokenByUsernamePassword(UsernamePasswordReq) returns (JwtTokenResp);
  // 通过刷新令牌获取 jwt token
  rpc GetJwtTokenByRefreshToken(JwtRefreshTokenReq) returns (JwtTokenResp);
  // 校验 jwt token
  rpc CheckJwtToken(CheckJwtTokenReq) returns (CheckJwtTokenResp);
}

message OpaqueRefreshTokenReq {
  string refresh_token = 1;
  string client = 2;
}

message OpaqueTokenResp {
  string access_token = 1; // 访问令牌
  string refresh_token = 2; // 刷新令牌
  string refresh_after = 3; // 客户端刷新访问令牌的时间点
  string access_expire = 4; // 访问令牌的有效期
  string refresh_expire = 5; // 刷新令牌的有效期
  string client = 6; // 客户端标识
}

message CheckOpaqueTokenReq {
  string access_token = 1;
  string refresh_token = 2;
  string client = 3;
}

// 不透明token
service OpaqueToken {
  // 通过用户名密码获取 opaque token
  rpc GetOpaqueTokenByUsernamePassword(UsernamePasswordReq) returns (OpaqueTokenResp);
  // 通过刷新令牌获取 opaque token
  rpc GetOpaqueTokenByRefreshToken(OpaqueRefreshTokenReq) returns (OpaqueTokenResp);
  // 校验 opaque token
  rpc CheckOpaqueToken(CheckOpaqueTokenReq) returns (OpaqueTokenResp);
}