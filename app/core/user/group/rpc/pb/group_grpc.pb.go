// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: proto/rpc/group.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Group_AddGroup_FullMethodName                  = "/group.Group/AddGroup"
	Group_DeleteGroup_FullMethodName               = "/group.Group/DeleteGroup"
	Group_UpdateGroup_FullMethodName               = "/group.Group/UpdateGroup"
	Group_UpdateGroupStatus_FullMethodName         = "/group.Group/UpdateGroupStatus"
	Group_QueryGroupDetail_FullMethodName          = "/group.Group/QueryGroupDetail"
	Group_QueryPageGroupList_FullMethodName        = "/group.Group/QueryPageGroupList"
	Group_QueryKeywordPageGroupList_FullMethodName = "/group.Group/QueryKeywordPageGroupList"
)

// GroupClient is the client API for Group service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 用户组
type GroupClient interface {
	// 添加用户组
	AddGroup(ctx context.Context, in *AddGroupReq, opts ...grpc.CallOption) (*AddGroupResp, error)
	// 删除用户组
	DeleteGroup(ctx context.Context, in *DeleteGroupReq, opts ...grpc.CallOption) (*DeleteGroupResp, error)
	// 更新用户组
	UpdateGroup(ctx context.Context, in *UpdateGroupReq, opts ...grpc.CallOption) (*UpdateGroupResp, error)
	// 更新用户组状态
	UpdateGroupStatus(ctx context.Context, in *UpdateGroupStatusReq, opts ...grpc.CallOption) (*UpdateGroupStatusResp, error)
	// 查询用户组详情
	QueryGroupDetail(ctx context.Context, in *QueryGroupDetailReq, opts ...grpc.CallOption) (*QueryGroupDetailResp, error)
	// 查询用户组分页列表
	QueryPageGroupList(ctx context.Context, in *QueryPageGroupListReq, opts ...grpc.CallOption) (*QueryPageGroupListResp, error)
	// 查询用户组所有列表
	QueryKeywordPageGroupList(ctx context.Context, in *QueryKeywordPageGroupListReq, opts ...grpc.CallOption) (*QueryKeywordPageGroupListResp, error)
}

type groupClient struct {
	cc grpc.ClientConnInterface
}

func NewGroupClient(cc grpc.ClientConnInterface) GroupClient {
	return &groupClient{cc}
}

func (c *groupClient) AddGroup(ctx context.Context, in *AddGroupReq, opts ...grpc.CallOption) (*AddGroupResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddGroupResp)
	err := c.cc.Invoke(ctx, Group_AddGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) DeleteGroup(ctx context.Context, in *DeleteGroupReq, opts ...grpc.CallOption) (*DeleteGroupResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteGroupResp)
	err := c.cc.Invoke(ctx, Group_DeleteGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) UpdateGroup(ctx context.Context, in *UpdateGroupReq, opts ...grpc.CallOption) (*UpdateGroupResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateGroupResp)
	err := c.cc.Invoke(ctx, Group_UpdateGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) UpdateGroupStatus(ctx context.Context, in *UpdateGroupStatusReq, opts ...grpc.CallOption) (*UpdateGroupStatusResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateGroupStatusResp)
	err := c.cc.Invoke(ctx, Group_UpdateGroupStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) QueryGroupDetail(ctx context.Context, in *QueryGroupDetailReq, opts ...grpc.CallOption) (*QueryGroupDetailResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryGroupDetailResp)
	err := c.cc.Invoke(ctx, Group_QueryGroupDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) QueryPageGroupList(ctx context.Context, in *QueryPageGroupListReq, opts ...grpc.CallOption) (*QueryPageGroupListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryPageGroupListResp)
	err := c.cc.Invoke(ctx, Group_QueryPageGroupList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) QueryKeywordPageGroupList(ctx context.Context, in *QueryKeywordPageGroupListReq, opts ...grpc.CallOption) (*QueryKeywordPageGroupListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryKeywordPageGroupListResp)
	err := c.cc.Invoke(ctx, Group_QueryKeywordPageGroupList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GroupServer is the server API for Group service.
// All implementations must embed UnimplementedGroupServer
// for forward compatibility.
//
// 用户组
type GroupServer interface {
	// 添加用户组
	AddGroup(context.Context, *AddGroupReq) (*AddGroupResp, error)
	// 删除用户组
	DeleteGroup(context.Context, *DeleteGroupReq) (*DeleteGroupResp, error)
	// 更新用户组
	UpdateGroup(context.Context, *UpdateGroupReq) (*UpdateGroupResp, error)
	// 更新用户组状态
	UpdateGroupStatus(context.Context, *UpdateGroupStatusReq) (*UpdateGroupStatusResp, error)
	// 查询用户组详情
	QueryGroupDetail(context.Context, *QueryGroupDetailReq) (*QueryGroupDetailResp, error)
	// 查询用户组分页列表
	QueryPageGroupList(context.Context, *QueryPageGroupListReq) (*QueryPageGroupListResp, error)
	// 查询用户组所有列表
	QueryKeywordPageGroupList(context.Context, *QueryKeywordPageGroupListReq) (*QueryKeywordPageGroupListResp, error)
	mustEmbedUnimplementedGroupServer()
}

// UnimplementedGroupServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGroupServer struct{}

func (UnimplementedGroupServer) AddGroup(context.Context, *AddGroupReq) (*AddGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGroup not implemented")
}
func (UnimplementedGroupServer) DeleteGroup(context.Context, *DeleteGroupReq) (*DeleteGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroup not implemented")
}
func (UnimplementedGroupServer) UpdateGroup(context.Context, *UpdateGroupReq) (*UpdateGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroup not implemented")
}
func (UnimplementedGroupServer) UpdateGroupStatus(context.Context, *UpdateGroupStatusReq) (*UpdateGroupStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroupStatus not implemented")
}
func (UnimplementedGroupServer) QueryGroupDetail(context.Context, *QueryGroupDetailReq) (*QueryGroupDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryGroupDetail not implemented")
}
func (UnimplementedGroupServer) QueryPageGroupList(context.Context, *QueryPageGroupListReq) (*QueryPageGroupListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPageGroupList not implemented")
}
func (UnimplementedGroupServer) QueryKeywordPageGroupList(context.Context, *QueryKeywordPageGroupListReq) (*QueryKeywordPageGroupListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryKeywordPageGroupList not implemented")
}
func (UnimplementedGroupServer) mustEmbedUnimplementedGroupServer() {}
func (UnimplementedGroupServer) testEmbeddedByValue()               {}

// UnsafeGroupServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GroupServer will
// result in compilation errors.
type UnsafeGroupServer interface {
	mustEmbedUnimplementedGroupServer()
}

func RegisterGroupServer(s grpc.ServiceRegistrar, srv GroupServer) {
	// If the following call pancis, it indicates UnimplementedGroupServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Group_ServiceDesc, srv)
}

func _Group_AddGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).AddGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Group_AddGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).AddGroup(ctx, req.(*AddGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Group_DeleteGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).DeleteGroup(ctx, req.(*DeleteGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_UpdateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).UpdateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Group_UpdateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).UpdateGroup(ctx, req.(*UpdateGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_UpdateGroupStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).UpdateGroupStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Group_UpdateGroupStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).UpdateGroupStatus(ctx, req.(*UpdateGroupStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_QueryGroupDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGroupDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).QueryGroupDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Group_QueryGroupDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).QueryGroupDetail(ctx, req.(*QueryGroupDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_QueryPageGroupList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPageGroupListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).QueryPageGroupList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Group_QueryPageGroupList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).QueryPageGroupList(ctx, req.(*QueryPageGroupListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_QueryKeywordPageGroupList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryKeywordPageGroupListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).QueryKeywordPageGroupList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Group_QueryKeywordPageGroupList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).QueryKeywordPageGroupList(ctx, req.(*QueryKeywordPageGroupListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Group_ServiceDesc is the grpc.ServiceDesc for Group service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Group_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "group.Group",
	HandlerType: (*GroupServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddGroup",
			Handler:    _Group_AddGroup_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _Group_DeleteGroup_Handler,
		},
		{
			MethodName: "UpdateGroup",
			Handler:    _Group_UpdateGroup_Handler,
		},
		{
			MethodName: "UpdateGroupStatus",
			Handler:    _Group_UpdateGroupStatus_Handler,
		},
		{
			MethodName: "QueryGroupDetail",
			Handler:    _Group_QueryGroupDetail_Handler,
		},
		{
			MethodName: "QueryPageGroupList",
			Handler:    _Group_QueryPageGroupList_Handler,
		},
		{
			MethodName: "QueryKeywordPageGroupList",
			Handler:    _Group_QueryKeywordPageGroupList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/rpc/group.proto",
}
