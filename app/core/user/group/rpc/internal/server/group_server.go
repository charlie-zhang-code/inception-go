// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3
// Source: group.proto

package server

import (
	"context"

	"group/rpc/internal/logic"
	"group/rpc/internal/svc"
	"group/rpc/pb"
)

type GroupServer struct {
	svcCtx *svc.ServiceContext
	pb.UnimplementedGroupServer
}

func NewGroupServer(svcCtx *svc.ServiceContext) *GroupServer {
	return &GroupServer{
		svcCtx: svcCtx,
	}
}

// 添加用户组
func (s *GroupServer) AddGroup(ctx context.Context, in *pb.AddGroupReq) (*pb.AddGroupResp, error) {
	l := logic.NewAddGroupLogic(ctx, s.svcCtx)
	return l.AddGroup(in)
}

// 删除用户组
func (s *GroupServer) DeleteGroup(ctx context.Context, in *pb.DeleteGroupReq) (*pb.DeleteGroupResp, error) {
	l := logic.NewDeleteGroupLogic(ctx, s.svcCtx)
	return l.DeleteGroup(in)
}

// 更新用户组
func (s *GroupServer) UpdateGroup(ctx context.Context, in *pb.UpdateGroupReq) (*pb.UpdateGroupResp, error) {
	l := logic.NewUpdateGroupLogic(ctx, s.svcCtx)
	return l.UpdateGroup(in)
}

// 更新用户组状态
func (s *GroupServer) UpdateGroupStatus(ctx context.Context, in *pb.UpdateGroupStatusReq) (*pb.UpdateGroupStatusResp, error) {
	l := logic.NewUpdateGroupStatusLogic(ctx, s.svcCtx)
	return l.UpdateGroupStatus(in)
}

// 查询用户组详情
func (s *GroupServer) QueryGroupDetail(ctx context.Context, in *pb.QueryGroupDetailReq) (*pb.QueryGroupDetailResp, error) {
	l := logic.NewQueryGroupDetailLogic(ctx, s.svcCtx)
	return l.QueryGroupDetail(in)
}

// 查询用户组分页列表
func (s *GroupServer) QueryPageGroupList(ctx context.Context, in *pb.QueryPageGroupListReq) (*pb.QueryPageGroupListResp, error) {
	l := logic.NewQueryPageGroupListLogic(ctx, s.svcCtx)
	return l.QueryPageGroupList(in)
}

// 查询用户组所有列表
func (s *GroupServer) QueryKeywordPageGroupList(ctx context.Context, in *pb.QueryKeywordPageGroupListReq) (*pb.QueryKeywordPageGroupListResp, error) {
	l := logic.NewQueryKeywordPageGroupListLogic(ctx, s.svcCtx)
	return l.QueryKeywordPageGroupList(in)
}
