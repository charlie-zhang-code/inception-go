// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	sysGroupFieldNames          = builder.RawFieldNames(&SysGroup{})
	sysGroupRows                = strings.Join(sysGroupFieldNames, ",")
	sysGroupRowsExpectAutoSet   = strings.Join(stringx.Remove(sysGroupFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	sysGroupRowsWithPlaceHolder = strings.Join(stringx.Remove(sysGroupFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	sysGroupModel interface {
		Insert(ctx context.Context, data *SysGroup) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*SysGroup, error)
		FindOneByCode(ctx context.Context, code string) (*SysGroup, error)
		Update(ctx context.Context, data *SysGroup) error
		Delete(ctx context.Context, id int64) error
	}

	defaultSysGroupModel struct {
		conn  sqlx.SqlConn
		table string
	}

	SysGroup struct {
		Id       int64     `db:"id"`        // 用户组唯一标识符，主键
		Name     string    `db:"name"`      // 用户组名称
		Code     string    `db:"code"`      // 用户组编码
		ParentId int64     `db:"parent_id"` // 父级用户组ID
		Sort     int64     `db:"sort"`      // 排序
		Leader   int64     `db:"leader"`    // 用户组负责人ID
		Status   int64     `db:"status"`    // 状态，0表示禁用，1表示正常启用
		Deleted  int64     `db:"deleted"`   // 逻辑删除标志，0表示未删除，1表示已删除，允许数据恢复
		Remark   string    `db:"remark"`    // 对记录的备注信息，如特殊说明等
		CreateAt time.Time `db:"create_at"` // 记录创建的时间戳
		CreateBy string    `db:"create_by"` // 创建该记录的用户标识符
		UpdateAt time.Time `db:"update_at"` // 记录最后更新的时间戳
		UpdateBy string    `db:"update_by"` // 最后更新该记录的用户标识符
	}
)

func newSysGroupModel(conn sqlx.SqlConn) *defaultSysGroupModel {
	return &defaultSysGroupModel{
		conn:  conn,
		table: "`sys_group`",
	}
}

func (m *defaultSysGroupModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultSysGroupModel) FindOne(ctx context.Context, id int64) (*SysGroup, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", sysGroupRows, m.table)
	var resp SysGroup
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysGroupModel) FindOneByCode(ctx context.Context, code string) (*SysGroup, error) {
	var resp SysGroup
	query := fmt.Sprintf("select %s from %s where `code` = ? limit 1", sysGroupRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, code)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysGroupModel) Insert(ctx context.Context, data *SysGroup) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, sysGroupRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Name, data.Code, data.ParentId, data.Sort, data.Leader, data.Status, data.Deleted, data.Remark, data.CreateBy, data.UpdateBy)
	return ret, err
}

func (m *defaultSysGroupModel) Update(ctx context.Context, newData *SysGroup) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, sysGroupRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Name, newData.Code, newData.ParentId, newData.Sort, newData.Leader, newData.Status, newData.Deleted, newData.Remark, newData.CreateBy, newData.UpdateBy, newData.Id)
	return err
}

func (m *defaultSysGroupModel) tableName() string {
	return m.table
}
