// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	sysUserFieldNames          = builder.RawFieldNames(&SysUser{})
	sysUserRows                = strings.Join(sysUserFieldNames, ",")
	sysUserRowsExpectAutoSet   = strings.Join(stringx.Remove(sysUserFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	sysUserRowsWithPlaceHolder = strings.Join(stringx.Remove(sysUserFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	sysUserModel interface {
		Insert(ctx context.Context, data *SysUser) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*SysUser, error)
		FindOneByEmail(ctx context.Context, email sql.NullString) (*SysUser, error)
		FindOneByIdentify(ctx context.Context, identify string) (*SysUser, error)
		FindOneByTelephone(ctx context.Context, telephone sql.NullString) (*SysUser, error)
		FindOneByUsername(ctx context.Context, username string) (*SysUser, error)
		Update(ctx context.Context, data *SysUser) error
		Delete(ctx context.Context, id int64) error
	}

	defaultSysUserModel struct {
		conn  sqlx.SqlConn
		table string
	}

	SysUser struct {
		Id          int64          `db:"id"`           // 用户唯一标识符，主键
		Identify    string         `db:"identify"`     // 用户的唯一标识符
		Username    string         `db:"username"`     // 用户登录时使用的用户名
		Password    string         `db:"password"`     // 用户账户的密码，应存储加密后的值
		Nickname    sql.NullString `db:"nickname"`     // 用户在系统中显示的名字，可选
		Avatar      sql.NullString `db:"avatar"`       // 用户头像的URL或路径
		Quote       sql.NullString `db:"quote"`        // 用户设置的个人座右铭或签名
		Birthday    sql.NullTime   `db:"birthday"`     // 用户的出生日期，用于个性化服务或统计
		Gender      int64          `db:"gender"`       // 用户的性别，0表示保密，1表示男性，2表示女性
		Email       sql.NullString `db:"email"`        // 用户的电子邮件地址，可用于找回密码或接收通知
		Telephone   sql.NullString `db:"telephone"`    // 用户的联系电话，可用于身份验证或联系用户
		LoginAt     time.Time      `db:"login_at"`     // 用户最近一次登录的时间戳
		LoginIp     sql.NullString `db:"login_ip"`     // 用户最近一次登录的IP地址
		LoginRegion sql.NullString `db:"login_region"` // 用户最近一次登录的IP地址所属的地理位置
		LoginOs     sql.NullString `db:"login_os"`     // 用户最近一次登录的操作系统
		Status      int64          `db:"status"`       // 状态，0表示禁用，1表示正常启用
		Deleted     int64          `db:"deleted"`      // 逻辑删除标志，0表示未删除，1表示已删除，允许数据恢复
		Remark      sql.NullString `db:"remark"`       // 对记录的备注信息，如特殊说明等
		CreateAt    time.Time      `db:"create_at"`    // 记录创建的时间戳
		CreateBy    sql.NullString `db:"create_by"`    // 创建该记录的用户标识符
		UpdateAt    time.Time      `db:"update_at"`    // 记录最后更新的时间戳
		UpdateBy    sql.NullString `db:"update_by"`    // 最后更新该记录的用户标识符
	}
)

func newSysUserModel(conn sqlx.SqlConn) *defaultSysUserModel {
	return &defaultSysUserModel{
		conn:  conn,
		table: "`sys_user`",
	}
}

func (m *defaultSysUserModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultSysUserModel) FindOne(ctx context.Context, id int64) (*SysUser, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", sysUserRows, m.table)
	var resp SysUser
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysUserModel) FindOneByEmail(ctx context.Context, email sql.NullString) (*SysUser, error) {
	var resp SysUser
	query := fmt.Sprintf("select %s from %s where `email` = ? limit 1", sysUserRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, email)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysUserModel) FindOneByIdentify(ctx context.Context, identify string) (*SysUser, error) {
	var resp SysUser
	query := fmt.Sprintf("select %s from %s where `identify` = ? limit 1", sysUserRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, identify)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysUserModel) FindOneByTelephone(ctx context.Context, telephone sql.NullString) (*SysUser, error) {
	var resp SysUser
	query := fmt.Sprintf("select %s from %s where `telephone` = ? limit 1", sysUserRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, telephone)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysUserModel) FindOneByUsername(ctx context.Context, username string) (*SysUser, error) {
	var resp SysUser
	query := fmt.Sprintf("select %s from %s where `username` = ? limit 1", sysUserRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, username)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysUserModel) Insert(ctx context.Context, data *SysUser) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, sysUserRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Identify, data.Username, data.Password, data.Nickname, data.Avatar, data.Quote, data.Birthday, data.Gender, data.Email, data.Telephone, data.LoginAt, data.LoginIp, data.LoginRegion, data.LoginOs, data.Status, data.Deleted, data.Remark, data.CreateBy, data.UpdateBy)
	return ret, err
}

func (m *defaultSysUserModel) Update(ctx context.Context, newData *SysUser) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, sysUserRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Identify, newData.Username, newData.Password, newData.Nickname, newData.Avatar, newData.Quote, newData.Birthday, newData.Gender, newData.Email, newData.Telephone, newData.LoginAt, newData.LoginIp, newData.LoginRegion, newData.LoginOs, newData.Status, newData.Deleted, newData.Remark, newData.CreateBy, newData.UpdateBy, newData.Id)
	return err
}

func (m *defaultSysUserModel) tableName() string {
	return m.table
}
