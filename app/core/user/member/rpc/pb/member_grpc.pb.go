// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: proto/rpc/member.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Member_AddMember_FullMethodName                     = "/member.Member/AddMember"
	Member_AddMemberWithUsernamePassword_FullMethodName = "/member.Member/AddMemberWithUsernamePassword"
	Member_DeleteMember_FullMethodName                  = "/member.Member/DeleteMember"
	Member_UpdateMember_FullMethodName                  = "/member.Member/UpdateMember"
	Member_UpdateMemberStatus_FullMethodName            = "/member.Member/UpdateMemberStatus"
	Member_QueryMemberDetail_FullMethodName             = "/member.Member/QueryMemberDetail"
	Member_QueryMemberDetailByIdentify_FullMethodName   = "/member.Member/QueryMemberDetailByIdentify"
	Member_QueryMemberDetailByUsername_FullMethodName   = "/member.Member/QueryMemberDetailByUsername"
	Member_QueryPageMemberList_FullMethodName           = "/member.Member/QueryPageMemberList"
	Member_QueryKeywordPageMemberList_FullMethodName    = "/member.Member/QueryKeywordPageMemberList"
)

// MemberClient is the client API for Member service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 用户
type MemberClient interface {
	// 添加用户
	AddMember(ctx context.Context, in *AddMemberReq, opts ...grpc.CallOption) (*AddMemberResp, error)
	// 添加用户
	AddMemberWithUsernamePassword(ctx context.Context, in *AddMemberWithUsernamePasswordReq, opts ...grpc.CallOption) (*AddMemberWithUsernamePasswordResp, error)
	// 删除用户
	DeleteMember(ctx context.Context, in *DeleteMemberReq, opts ...grpc.CallOption) (*DeleteMemberResp, error)
	// 更新用户
	UpdateMember(ctx context.Context, in *UpdateMemberReq, opts ...grpc.CallOption) (*UpdateMemberResp, error)
	// 更新用户状态
	UpdateMemberStatus(ctx context.Context, in *UpdateMemberStatusReq, opts ...grpc.CallOption) (*UpdateMemberStatusResp, error)
	// 查询用户详情（通过id）
	QueryMemberDetail(ctx context.Context, in *QueryMemberDetailReq, opts ...grpc.CallOption) (*QueryMemberDetailResp, error)
	// 查询用户详情（通过用户唯一标识）
	QueryMemberDetailByIdentify(ctx context.Context, in *QueryMemberDetailByIdentifyReq, opts ...grpc.CallOption) (*QueryMemberDetailByIdentifyResp, error)
	// 查询用户详情（通过用户名）
	QueryMemberDetailByUsername(ctx context.Context, in *QueryMemberDetailByUsernameReq, opts ...grpc.CallOption) (*QueryMemberDetailByUsernameResp, error)
	// 查询用户分页列表
	QueryPageMemberList(ctx context.Context, in *QueryPageMemberListReq, opts ...grpc.CallOption) (*QueryPageMemberListResp, error)
	// 查询关键字用户分页列表
	QueryKeywordPageMemberList(ctx context.Context, in *QueryKeywordPageMemberListReq, opts ...grpc.CallOption) (*QueryKeywordPageMemberListResp, error)
}

type memberClient struct {
	cc grpc.ClientConnInterface
}

func NewMemberClient(cc grpc.ClientConnInterface) MemberClient {
	return &memberClient{cc}
}

func (c *memberClient) AddMember(ctx context.Context, in *AddMemberReq, opts ...grpc.CallOption) (*AddMemberResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddMemberResp)
	err := c.cc.Invoke(ctx, Member_AddMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) AddMemberWithUsernamePassword(ctx context.Context, in *AddMemberWithUsernamePasswordReq, opts ...grpc.CallOption) (*AddMemberWithUsernamePasswordResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddMemberWithUsernamePasswordResp)
	err := c.cc.Invoke(ctx, Member_AddMemberWithUsernamePassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) DeleteMember(ctx context.Context, in *DeleteMemberReq, opts ...grpc.CallOption) (*DeleteMemberResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteMemberResp)
	err := c.cc.Invoke(ctx, Member_DeleteMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) UpdateMember(ctx context.Context, in *UpdateMemberReq, opts ...grpc.CallOption) (*UpdateMemberResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateMemberResp)
	err := c.cc.Invoke(ctx, Member_UpdateMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) UpdateMemberStatus(ctx context.Context, in *UpdateMemberStatusReq, opts ...grpc.CallOption) (*UpdateMemberStatusResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateMemberStatusResp)
	err := c.cc.Invoke(ctx, Member_UpdateMemberStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) QueryMemberDetail(ctx context.Context, in *QueryMemberDetailReq, opts ...grpc.CallOption) (*QueryMemberDetailResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryMemberDetailResp)
	err := c.cc.Invoke(ctx, Member_QueryMemberDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) QueryMemberDetailByIdentify(ctx context.Context, in *QueryMemberDetailByIdentifyReq, opts ...grpc.CallOption) (*QueryMemberDetailByIdentifyResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryMemberDetailByIdentifyResp)
	err := c.cc.Invoke(ctx, Member_QueryMemberDetailByIdentify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) QueryMemberDetailByUsername(ctx context.Context, in *QueryMemberDetailByUsernameReq, opts ...grpc.CallOption) (*QueryMemberDetailByUsernameResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryMemberDetailByUsernameResp)
	err := c.cc.Invoke(ctx, Member_QueryMemberDetailByUsername_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) QueryPageMemberList(ctx context.Context, in *QueryPageMemberListReq, opts ...grpc.CallOption) (*QueryPageMemberListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryPageMemberListResp)
	err := c.cc.Invoke(ctx, Member_QueryPageMemberList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) QueryKeywordPageMemberList(ctx context.Context, in *QueryKeywordPageMemberListReq, opts ...grpc.CallOption) (*QueryKeywordPageMemberListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryKeywordPageMemberListResp)
	err := c.cc.Invoke(ctx, Member_QueryKeywordPageMemberList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MemberServer is the server API for Member service.
// All implementations must embed UnimplementedMemberServer
// for forward compatibility.
//
// 用户
type MemberServer interface {
	// 添加用户
	AddMember(context.Context, *AddMemberReq) (*AddMemberResp, error)
	// 添加用户
	AddMemberWithUsernamePassword(context.Context, *AddMemberWithUsernamePasswordReq) (*AddMemberWithUsernamePasswordResp, error)
	// 删除用户
	DeleteMember(context.Context, *DeleteMemberReq) (*DeleteMemberResp, error)
	// 更新用户
	UpdateMember(context.Context, *UpdateMemberReq) (*UpdateMemberResp, error)
	// 更新用户状态
	UpdateMemberStatus(context.Context, *UpdateMemberStatusReq) (*UpdateMemberStatusResp, error)
	// 查询用户详情（通过id）
	QueryMemberDetail(context.Context, *QueryMemberDetailReq) (*QueryMemberDetailResp, error)
	// 查询用户详情（通过用户唯一标识）
	QueryMemberDetailByIdentify(context.Context, *QueryMemberDetailByIdentifyReq) (*QueryMemberDetailByIdentifyResp, error)
	// 查询用户详情（通过用户名）
	QueryMemberDetailByUsername(context.Context, *QueryMemberDetailByUsernameReq) (*QueryMemberDetailByUsernameResp, error)
	// 查询用户分页列表
	QueryPageMemberList(context.Context, *QueryPageMemberListReq) (*QueryPageMemberListResp, error)
	// 查询关键字用户分页列表
	QueryKeywordPageMemberList(context.Context, *QueryKeywordPageMemberListReq) (*QueryKeywordPageMemberListResp, error)
	mustEmbedUnimplementedMemberServer()
}

// UnimplementedMemberServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMemberServer struct{}

func (UnimplementedMemberServer) AddMember(context.Context, *AddMemberReq) (*AddMemberResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMember not implemented")
}
func (UnimplementedMemberServer) AddMemberWithUsernamePassword(context.Context, *AddMemberWithUsernamePasswordReq) (*AddMemberWithUsernamePasswordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMemberWithUsernamePassword not implemented")
}
func (UnimplementedMemberServer) DeleteMember(context.Context, *DeleteMemberReq) (*DeleteMemberResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMember not implemented")
}
func (UnimplementedMemberServer) UpdateMember(context.Context, *UpdateMemberReq) (*UpdateMemberResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMember not implemented")
}
func (UnimplementedMemberServer) UpdateMemberStatus(context.Context, *UpdateMemberStatusReq) (*UpdateMemberStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMemberStatus not implemented")
}
func (UnimplementedMemberServer) QueryMemberDetail(context.Context, *QueryMemberDetailReq) (*QueryMemberDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMemberDetail not implemented")
}
func (UnimplementedMemberServer) QueryMemberDetailByIdentify(context.Context, *QueryMemberDetailByIdentifyReq) (*QueryMemberDetailByIdentifyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMemberDetailByIdentify not implemented")
}
func (UnimplementedMemberServer) QueryMemberDetailByUsername(context.Context, *QueryMemberDetailByUsernameReq) (*QueryMemberDetailByUsernameResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMemberDetailByUsername not implemented")
}
func (UnimplementedMemberServer) QueryPageMemberList(context.Context, *QueryPageMemberListReq) (*QueryPageMemberListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPageMemberList not implemented")
}
func (UnimplementedMemberServer) QueryKeywordPageMemberList(context.Context, *QueryKeywordPageMemberListReq) (*QueryKeywordPageMemberListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryKeywordPageMemberList not implemented")
}
func (UnimplementedMemberServer) mustEmbedUnimplementedMemberServer() {}
func (UnimplementedMemberServer) testEmbeddedByValue()                {}

// UnsafeMemberServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MemberServer will
// result in compilation errors.
type UnsafeMemberServer interface {
	mustEmbedUnimplementedMemberServer()
}

func RegisterMemberServer(s grpc.ServiceRegistrar, srv MemberServer) {
	// If the following call pancis, it indicates UnimplementedMemberServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Member_ServiceDesc, srv)
}

func _Member_AddMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).AddMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Member_AddMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).AddMember(ctx, req.(*AddMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_AddMemberWithUsernamePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMemberWithUsernamePasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).AddMemberWithUsernamePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Member_AddMemberWithUsernamePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).AddMemberWithUsernamePassword(ctx, req.(*AddMemberWithUsernamePasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_DeleteMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).DeleteMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Member_DeleteMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).DeleteMember(ctx, req.(*DeleteMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_UpdateMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).UpdateMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Member_UpdateMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).UpdateMember(ctx, req.(*UpdateMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_UpdateMemberStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMemberStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).UpdateMemberStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Member_UpdateMemberStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).UpdateMemberStatus(ctx, req.(*UpdateMemberStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_QueryMemberDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMemberDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).QueryMemberDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Member_QueryMemberDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).QueryMemberDetail(ctx, req.(*QueryMemberDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_QueryMemberDetailByIdentify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMemberDetailByIdentifyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).QueryMemberDetailByIdentify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Member_QueryMemberDetailByIdentify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).QueryMemberDetailByIdentify(ctx, req.(*QueryMemberDetailByIdentifyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_QueryMemberDetailByUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMemberDetailByUsernameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).QueryMemberDetailByUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Member_QueryMemberDetailByUsername_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).QueryMemberDetailByUsername(ctx, req.(*QueryMemberDetailByUsernameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_QueryPageMemberList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPageMemberListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).QueryPageMemberList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Member_QueryPageMemberList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).QueryPageMemberList(ctx, req.(*QueryPageMemberListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_QueryKeywordPageMemberList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryKeywordPageMemberListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).QueryKeywordPageMemberList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Member_QueryKeywordPageMemberList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).QueryKeywordPageMemberList(ctx, req.(*QueryKeywordPageMemberListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Member_ServiceDesc is the grpc.ServiceDesc for Member service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Member_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "member.Member",
	HandlerType: (*MemberServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddMember",
			Handler:    _Member_AddMember_Handler,
		},
		{
			MethodName: "AddMemberWithUsernamePassword",
			Handler:    _Member_AddMemberWithUsernamePassword_Handler,
		},
		{
			MethodName: "DeleteMember",
			Handler:    _Member_DeleteMember_Handler,
		},
		{
			MethodName: "UpdateMember",
			Handler:    _Member_UpdateMember_Handler,
		},
		{
			MethodName: "UpdateMemberStatus",
			Handler:    _Member_UpdateMemberStatus_Handler,
		},
		{
			MethodName: "QueryMemberDetail",
			Handler:    _Member_QueryMemberDetail_Handler,
		},
		{
			MethodName: "QueryMemberDetailByIdentify",
			Handler:    _Member_QueryMemberDetailByIdentify_Handler,
		},
		{
			MethodName: "QueryMemberDetailByUsername",
			Handler:    _Member_QueryMemberDetailByUsername_Handler,
		},
		{
			MethodName: "QueryPageMemberList",
			Handler:    _Member_QueryPageMemberList_Handler,
		},
		{
			MethodName: "QueryKeywordPageMemberList",
			Handler:    _Member_QueryKeywordPageMemberList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/rpc/member.proto",
}
