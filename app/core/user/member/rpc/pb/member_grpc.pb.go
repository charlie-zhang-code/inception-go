// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: proto/rpc/member.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Member_CreateMember_FullMethodName              = "/member.Member/CreateMember"
	Member_DeleteMember_FullMethodName              = "/member.Member/DeleteMember"
	Member_UpdateMember_FullMethodName              = "/member.Member/UpdateMember"
	Member_GetMemberDetailById_FullMethodName       = "/member.Member/GetMemberDetailById"
	Member_GetMemberDetailByUsername_FullMethodName = "/member.Member/GetMemberDetailByUsername"
	Member_GetKeywordPageMemberList_FullMethodName  = "/member.Member/GetKeywordPageMemberList"
)

// MemberClient is the client API for Member service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 用户基础信息服务
type MemberClient interface {
	// 添加用户
	CreateMember(ctx context.Context, in *MemberData, opts ...grpc.CallOption) (*CodeMessageResult, error)
	// 删除用户
	DeleteMember(ctx context.Context, in *DeleteMemberIds, opts ...grpc.CallOption) (*CodeMessageResult, error)
	// 更新用户
	UpdateMember(ctx context.Context, in *MemberData, opts ...grpc.CallOption) (*CodeMessageResult, error)
	// 查询用户详情（通过id）
	GetMemberDetailById(ctx context.Context, in *QueryMemberDetailById, opts ...grpc.CallOption) (*MemberData, error)
	// 查询用户详情（通过用户名）
	GetMemberDetailByUsername(ctx context.Context, in *QueryMemberDetailByUsername, opts ...grpc.CallOption) (*MemberData, error)
	// 查询用户分页列表
	GetKeywordPageMemberList(ctx context.Context, in *QueryPageMemberList, opts ...grpc.CallOption) (*QueryPageMemberListResult, error)
}

type memberClient struct {
	cc grpc.ClientConnInterface
}

func NewMemberClient(cc grpc.ClientConnInterface) MemberClient {
	return &memberClient{cc}
}

func (c *memberClient) CreateMember(ctx context.Context, in *MemberData, opts ...grpc.CallOption) (*CodeMessageResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CodeMessageResult)
	err := c.cc.Invoke(ctx, Member_CreateMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) DeleteMember(ctx context.Context, in *DeleteMemberIds, opts ...grpc.CallOption) (*CodeMessageResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CodeMessageResult)
	err := c.cc.Invoke(ctx, Member_DeleteMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) UpdateMember(ctx context.Context, in *MemberData, opts ...grpc.CallOption) (*CodeMessageResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CodeMessageResult)
	err := c.cc.Invoke(ctx, Member_UpdateMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) GetMemberDetailById(ctx context.Context, in *QueryMemberDetailById, opts ...grpc.CallOption) (*MemberData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MemberData)
	err := c.cc.Invoke(ctx, Member_GetMemberDetailById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) GetMemberDetailByUsername(ctx context.Context, in *QueryMemberDetailByUsername, opts ...grpc.CallOption) (*MemberData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MemberData)
	err := c.cc.Invoke(ctx, Member_GetMemberDetailByUsername_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) GetKeywordPageMemberList(ctx context.Context, in *QueryPageMemberList, opts ...grpc.CallOption) (*QueryPageMemberListResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryPageMemberListResult)
	err := c.cc.Invoke(ctx, Member_GetKeywordPageMemberList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MemberServer is the server API for Member service.
// All implementations must embed UnimplementedMemberServer
// for forward compatibility.
//
// 用户基础信息服务
type MemberServer interface {
	// 添加用户
	CreateMember(context.Context, *MemberData) (*CodeMessageResult, error)
	// 删除用户
	DeleteMember(context.Context, *DeleteMemberIds) (*CodeMessageResult, error)
	// 更新用户
	UpdateMember(context.Context, *MemberData) (*CodeMessageResult, error)
	// 查询用户详情（通过id）
	GetMemberDetailById(context.Context, *QueryMemberDetailById) (*MemberData, error)
	// 查询用户详情（通过用户名）
	GetMemberDetailByUsername(context.Context, *QueryMemberDetailByUsername) (*MemberData, error)
	// 查询用户分页列表
	GetKeywordPageMemberList(context.Context, *QueryPageMemberList) (*QueryPageMemberListResult, error)
	mustEmbedUnimplementedMemberServer()
}

// UnimplementedMemberServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMemberServer struct{}

func (UnimplementedMemberServer) CreateMember(context.Context, *MemberData) (*CodeMessageResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMember not implemented")
}
func (UnimplementedMemberServer) DeleteMember(context.Context, *DeleteMemberIds) (*CodeMessageResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMember not implemented")
}
func (UnimplementedMemberServer) UpdateMember(context.Context, *MemberData) (*CodeMessageResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMember not implemented")
}
func (UnimplementedMemberServer) GetMemberDetailById(context.Context, *QueryMemberDetailById) (*MemberData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMemberDetailById not implemented")
}
func (UnimplementedMemberServer) GetMemberDetailByUsername(context.Context, *QueryMemberDetailByUsername) (*MemberData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMemberDetailByUsername not implemented")
}
func (UnimplementedMemberServer) GetKeywordPageMemberList(context.Context, *QueryPageMemberList) (*QueryPageMemberListResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKeywordPageMemberList not implemented")
}
func (UnimplementedMemberServer) mustEmbedUnimplementedMemberServer() {}
func (UnimplementedMemberServer) testEmbeddedByValue()                {}

// UnsafeMemberServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MemberServer will
// result in compilation errors.
type UnsafeMemberServer interface {
	mustEmbedUnimplementedMemberServer()
}

func RegisterMemberServer(s grpc.ServiceRegistrar, srv MemberServer) {
	// If the following call pancis, it indicates UnimplementedMemberServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Member_ServiceDesc, srv)
}

func _Member_CreateMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).CreateMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Member_CreateMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).CreateMember(ctx, req.(*MemberData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_DeleteMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMemberIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).DeleteMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Member_DeleteMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).DeleteMember(ctx, req.(*DeleteMemberIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_UpdateMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).UpdateMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Member_UpdateMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).UpdateMember(ctx, req.(*MemberData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_GetMemberDetailById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMemberDetailById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).GetMemberDetailById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Member_GetMemberDetailById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).GetMemberDetailById(ctx, req.(*QueryMemberDetailById))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_GetMemberDetailByUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMemberDetailByUsername)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).GetMemberDetailByUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Member_GetMemberDetailByUsername_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).GetMemberDetailByUsername(ctx, req.(*QueryMemberDetailByUsername))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_GetKeywordPageMemberList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPageMemberList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).GetKeywordPageMemberList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Member_GetKeywordPageMemberList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).GetKeywordPageMemberList(ctx, req.(*QueryPageMemberList))
	}
	return interceptor(ctx, in, info, handler)
}

// Member_ServiceDesc is the grpc.ServiceDesc for Member service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Member_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "member.Member",
	HandlerType: (*MemberServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMember",
			Handler:    _Member_CreateMember_Handler,
		},
		{
			MethodName: "DeleteMember",
			Handler:    _Member_DeleteMember_Handler,
		},
		{
			MethodName: "UpdateMember",
			Handler:    _Member_UpdateMember_Handler,
		},
		{
			MethodName: "GetMemberDetailById",
			Handler:    _Member_GetMemberDetailById_Handler,
		},
		{
			MethodName: "GetMemberDetailByUsername",
			Handler:    _Member_GetMemberDetailByUsername_Handler,
		},
		{
			MethodName: "GetKeywordPageMemberList",
			Handler:    _Member_GetKeywordPageMemberList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/rpc/member.proto",
}
