// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: proto/rpc/main.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Service_AddMember_FullMethodName                     = "/main.Service/AddMember"
	Service_AddMemberWithUsernamePassword_FullMethodName = "/main.Service/AddMemberWithUsernamePassword"
	Service_DeleteMember_FullMethodName                  = "/main.Service/DeleteMember"
	Service_UpdateMember_FullMethodName                  = "/main.Service/UpdateMember"
	Service_UpdateMemberStatus_FullMethodName            = "/main.Service/UpdateMemberStatus"
	Service_QueryMemberDetail_FullMethodName             = "/main.Service/QueryMemberDetail"
	Service_QueryMemberDetailByIdentify_FullMethodName   = "/main.Service/QueryMemberDetailByIdentify"
	Service_QueryPageMemberList_FullMethodName           = "/main.Service/QueryPageMemberList"
	Service_QueryKeywordPageMemberList_FullMethodName    = "/main.Service/QueryKeywordPageMemberList"
	Service_QueryMemberList_FullMethodName               = "/main.Service/QueryMemberList"
	Service_QueryKeywordMemberList_FullMethodName        = "/main.Service/QueryKeywordMemberList"
)

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 用户
type ServiceClient interface {
	// 添加用户
	AddMember(ctx context.Context, in *AddMemberReq, opts ...grpc.CallOption) (*AddMemberResp, error)
	// 添加用户
	AddMemberWithUsernamePassword(ctx context.Context, in *AddMemberWithUsernamePasswordReq, opts ...grpc.CallOption) (*AddMemberWithUsernamePasswordResp, error)
	// 删除用户
	DeleteMember(ctx context.Context, in *DeleteMemberReq, opts ...grpc.CallOption) (*DeleteMemberResp, error)
	// 更新用户
	UpdateMember(ctx context.Context, in *UpdateMemberReq, opts ...grpc.CallOption) (*UpdateMemberResp, error)
	// 更新用户状态
	UpdateMemberStatus(ctx context.Context, in *UpdateMemberStatusReq, opts ...grpc.CallOption) (*UpdateMemberStatusResp, error)
	// 查询用户详情（通过id）
	QueryMemberDetail(ctx context.Context, in *QueryMemberDetailReq, opts ...grpc.CallOption) (*QueryMemberDetailResp, error)
	// 查询用户详情（通过id）
	QueryMemberDetailByIdentify(ctx context.Context, in *QueryMemberDetailByIdentifyReq, opts ...grpc.CallOption) (*QueryMemberDetailByIdentifyResp, error)
	// 查询用户分页列表
	QueryPageMemberList(ctx context.Context, in *QueryPageMemberListReq, opts ...grpc.CallOption) (*QueryPageMemberListResp, error)
	// 查询关键字用户分页列表
	QueryKeywordPageMemberList(ctx context.Context, in *QueryKeywordPageMemberListReq, opts ...grpc.CallOption) (*QueryKeywordPageMemberListResp, error)
	// 查询用户所有列表
	QueryMemberList(ctx context.Context, in *QueryMemberListReq, opts ...grpc.CallOption) (*QueryMemberListResp, error)
	// 查询关键字用户列表
	QueryKeywordMemberList(ctx context.Context, in *QueryKeywordMemberListReq, opts ...grpc.CallOption) (*QueryKeywordMemberListResp, error)
}

type serviceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceClient(cc grpc.ClientConnInterface) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) AddMember(ctx context.Context, in *AddMemberReq, opts ...grpc.CallOption) (*AddMemberResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddMemberResp)
	err := c.cc.Invoke(ctx, Service_AddMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AddMemberWithUsernamePassword(ctx context.Context, in *AddMemberWithUsernamePasswordReq, opts ...grpc.CallOption) (*AddMemberWithUsernamePasswordResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddMemberWithUsernamePasswordResp)
	err := c.cc.Invoke(ctx, Service_AddMemberWithUsernamePassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DeleteMember(ctx context.Context, in *DeleteMemberReq, opts ...grpc.CallOption) (*DeleteMemberResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteMemberResp)
	err := c.cc.Invoke(ctx, Service_DeleteMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) UpdateMember(ctx context.Context, in *UpdateMemberReq, opts ...grpc.CallOption) (*UpdateMemberResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateMemberResp)
	err := c.cc.Invoke(ctx, Service_UpdateMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) UpdateMemberStatus(ctx context.Context, in *UpdateMemberStatusReq, opts ...grpc.CallOption) (*UpdateMemberStatusResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateMemberStatusResp)
	err := c.cc.Invoke(ctx, Service_UpdateMemberStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) QueryMemberDetail(ctx context.Context, in *QueryMemberDetailReq, opts ...grpc.CallOption) (*QueryMemberDetailResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryMemberDetailResp)
	err := c.cc.Invoke(ctx, Service_QueryMemberDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) QueryMemberDetailByIdentify(ctx context.Context, in *QueryMemberDetailByIdentifyReq, opts ...grpc.CallOption) (*QueryMemberDetailByIdentifyResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryMemberDetailByIdentifyResp)
	err := c.cc.Invoke(ctx, Service_QueryMemberDetailByIdentify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) QueryPageMemberList(ctx context.Context, in *QueryPageMemberListReq, opts ...grpc.CallOption) (*QueryPageMemberListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryPageMemberListResp)
	err := c.cc.Invoke(ctx, Service_QueryPageMemberList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) QueryKeywordPageMemberList(ctx context.Context, in *QueryKeywordPageMemberListReq, opts ...grpc.CallOption) (*QueryKeywordPageMemberListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryKeywordPageMemberListResp)
	err := c.cc.Invoke(ctx, Service_QueryKeywordPageMemberList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) QueryMemberList(ctx context.Context, in *QueryMemberListReq, opts ...grpc.CallOption) (*QueryMemberListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryMemberListResp)
	err := c.cc.Invoke(ctx, Service_QueryMemberList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) QueryKeywordMemberList(ctx context.Context, in *QueryKeywordMemberListReq, opts ...grpc.CallOption) (*QueryKeywordMemberListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryKeywordMemberListResp)
	err := c.cc.Invoke(ctx, Service_QueryKeywordMemberList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceServer is the server API for Service service.
// All implementations must embed UnimplementedServiceServer
// for forward compatibility.
//
// 用户
type ServiceServer interface {
	// 添加用户
	AddMember(context.Context, *AddMemberReq) (*AddMemberResp, error)
	// 添加用户
	AddMemberWithUsernamePassword(context.Context, *AddMemberWithUsernamePasswordReq) (*AddMemberWithUsernamePasswordResp, error)
	// 删除用户
	DeleteMember(context.Context, *DeleteMemberReq) (*DeleteMemberResp, error)
	// 更新用户
	UpdateMember(context.Context, *UpdateMemberReq) (*UpdateMemberResp, error)
	// 更新用户状态
	UpdateMemberStatus(context.Context, *UpdateMemberStatusReq) (*UpdateMemberStatusResp, error)
	// 查询用户详情（通过id）
	QueryMemberDetail(context.Context, *QueryMemberDetailReq) (*QueryMemberDetailResp, error)
	// 查询用户详情（通过id）
	QueryMemberDetailByIdentify(context.Context, *QueryMemberDetailByIdentifyReq) (*QueryMemberDetailByIdentifyResp, error)
	// 查询用户分页列表
	QueryPageMemberList(context.Context, *QueryPageMemberListReq) (*QueryPageMemberListResp, error)
	// 查询关键字用户分页列表
	QueryKeywordPageMemberList(context.Context, *QueryKeywordPageMemberListReq) (*QueryKeywordPageMemberListResp, error)
	// 查询用户所有列表
	QueryMemberList(context.Context, *QueryMemberListReq) (*QueryMemberListResp, error)
	// 查询关键字用户列表
	QueryKeywordMemberList(context.Context, *QueryKeywordMemberListReq) (*QueryKeywordMemberListResp, error)
	mustEmbedUnimplementedServiceServer()
}

// UnimplementedServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedServiceServer struct{}

func (UnimplementedServiceServer) AddMember(context.Context, *AddMemberReq) (*AddMemberResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMember not implemented")
}
func (UnimplementedServiceServer) AddMemberWithUsernamePassword(context.Context, *AddMemberWithUsernamePasswordReq) (*AddMemberWithUsernamePasswordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMemberWithUsernamePassword not implemented")
}
func (UnimplementedServiceServer) DeleteMember(context.Context, *DeleteMemberReq) (*DeleteMemberResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMember not implemented")
}
func (UnimplementedServiceServer) UpdateMember(context.Context, *UpdateMemberReq) (*UpdateMemberResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMember not implemented")
}
func (UnimplementedServiceServer) UpdateMemberStatus(context.Context, *UpdateMemberStatusReq) (*UpdateMemberStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMemberStatus not implemented")
}
func (UnimplementedServiceServer) QueryMemberDetail(context.Context, *QueryMemberDetailReq) (*QueryMemberDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMemberDetail not implemented")
}
func (UnimplementedServiceServer) QueryMemberDetailByIdentify(context.Context, *QueryMemberDetailByIdentifyReq) (*QueryMemberDetailByIdentifyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMemberDetailByIdentify not implemented")
}
func (UnimplementedServiceServer) QueryPageMemberList(context.Context, *QueryPageMemberListReq) (*QueryPageMemberListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPageMemberList not implemented")
}
func (UnimplementedServiceServer) QueryKeywordPageMemberList(context.Context, *QueryKeywordPageMemberListReq) (*QueryKeywordPageMemberListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryKeywordPageMemberList not implemented")
}
func (UnimplementedServiceServer) QueryMemberList(context.Context, *QueryMemberListReq) (*QueryMemberListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMemberList not implemented")
}
func (UnimplementedServiceServer) QueryKeywordMemberList(context.Context, *QueryKeywordMemberListReq) (*QueryKeywordMemberListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryKeywordMemberList not implemented")
}
func (UnimplementedServiceServer) mustEmbedUnimplementedServiceServer() {}
func (UnimplementedServiceServer) testEmbeddedByValue()                 {}

// UnsafeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceServer will
// result in compilation errors.
type UnsafeServiceServer interface {
	mustEmbedUnimplementedServiceServer()
}

func RegisterServiceServer(s grpc.ServiceRegistrar, srv ServiceServer) {
	// If the following call pancis, it indicates UnimplementedServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Service_ServiceDesc, srv)
}

func _Service_AddMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AddMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_AddMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AddMember(ctx, req.(*AddMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AddMemberWithUsernamePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMemberWithUsernamePasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AddMemberWithUsernamePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_AddMemberWithUsernamePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AddMemberWithUsernamePassword(ctx, req.(*AddMemberWithUsernamePasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DeleteMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DeleteMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_DeleteMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DeleteMember(ctx, req.(*DeleteMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_UpdateMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).UpdateMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_UpdateMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).UpdateMember(ctx, req.(*UpdateMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_UpdateMemberStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMemberStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).UpdateMemberStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_UpdateMemberStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).UpdateMemberStatus(ctx, req.(*UpdateMemberStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_QueryMemberDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMemberDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).QueryMemberDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_QueryMemberDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).QueryMemberDetail(ctx, req.(*QueryMemberDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_QueryMemberDetailByIdentify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMemberDetailByIdentifyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).QueryMemberDetailByIdentify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_QueryMemberDetailByIdentify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).QueryMemberDetailByIdentify(ctx, req.(*QueryMemberDetailByIdentifyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_QueryPageMemberList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPageMemberListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).QueryPageMemberList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_QueryPageMemberList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).QueryPageMemberList(ctx, req.(*QueryPageMemberListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_QueryKeywordPageMemberList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryKeywordPageMemberListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).QueryKeywordPageMemberList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_QueryKeywordPageMemberList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).QueryKeywordPageMemberList(ctx, req.(*QueryKeywordPageMemberListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_QueryMemberList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMemberListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).QueryMemberList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_QueryMemberList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).QueryMemberList(ctx, req.(*QueryMemberListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_QueryKeywordMemberList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryKeywordMemberListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).QueryKeywordMemberList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_QueryKeywordMemberList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).QueryKeywordMemberList(ctx, req.(*QueryKeywordMemberListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Service_ServiceDesc is the grpc.ServiceDesc for Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddMember",
			Handler:    _Service_AddMember_Handler,
		},
		{
			MethodName: "AddMemberWithUsernamePassword",
			Handler:    _Service_AddMemberWithUsernamePassword_Handler,
		},
		{
			MethodName: "DeleteMember",
			Handler:    _Service_DeleteMember_Handler,
		},
		{
			MethodName: "UpdateMember",
			Handler:    _Service_UpdateMember_Handler,
		},
		{
			MethodName: "UpdateMemberStatus",
			Handler:    _Service_UpdateMemberStatus_Handler,
		},
		{
			MethodName: "QueryMemberDetail",
			Handler:    _Service_QueryMemberDetail_Handler,
		},
		{
			MethodName: "QueryMemberDetailByIdentify",
			Handler:    _Service_QueryMemberDetailByIdentify_Handler,
		},
		{
			MethodName: "QueryPageMemberList",
			Handler:    _Service_QueryPageMemberList_Handler,
		},
		{
			MethodName: "QueryKeywordPageMemberList",
			Handler:    _Service_QueryKeywordPageMemberList_Handler,
		},
		{
			MethodName: "QueryMemberList",
			Handler:    _Service_QueryMemberList_Handler,
		},
		{
			MethodName: "QueryKeywordMemberList",
			Handler:    _Service_QueryKeywordMemberList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/rpc/main.proto",
}
