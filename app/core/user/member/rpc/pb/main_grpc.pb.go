// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: proto/rpc/main.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Service_AddSysUser_FullMethodName           = "/user.member.rpc.Service/AddSysUser"
	Service_DeleteSysUser_FullMethodName        = "/user.member.rpc.Service/DeleteSysUser"
	Service_UpdateSysUser_FullMethodName        = "/user.member.rpc.Service/UpdateSysUser"
	Service_UpdateSysUserStatus_FullMethodName  = "/user.member.rpc.Service/UpdateSysUserStatus"
	Service_QuerySysUserDetail_FullMethodName   = "/user.member.rpc.Service/QuerySysUserDetail"
	Service_QueryPageSysUserList_FullMethodName = "/user.member.rpc.Service/QueryPageSysUserList"
	Service_QuerySysUserList_FullMethodName     = "/user.member.rpc.Service/QuerySysUserList"
)

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 用户
type ServiceClient interface {
	// 添加用户
	AddSysUser(ctx context.Context, in *AddSysUserReq, opts ...grpc.CallOption) (*AddSysUserResp, error)
	// 删除用户
	DeleteSysUser(ctx context.Context, in *DeleteSysUserReq, opts ...grpc.CallOption) (*DeleteSysUserResp, error)
	// 更新用户
	UpdateSysUser(ctx context.Context, in *UpdateSysUserReq, opts ...grpc.CallOption) (*UpdateSysUserResp, error)
	// 更新用户状态
	UpdateSysUserStatus(ctx context.Context, in *UpdateSysUserStatusReq, opts ...grpc.CallOption) (*UpdateSysUserStatusResp, error)
	// 查询用户详情
	QuerySysUserDetail(ctx context.Context, in *QuerySysUserDetailReq, opts ...grpc.CallOption) (*QuerySysUserDetailResp, error)
	// 查询用户分页列表
	QueryPageSysUserList(ctx context.Context, in *QueryPageSysUserListReq, opts ...grpc.CallOption) (*QueryPageSysUserListResp, error)
	// 查询用户所有列表
	QuerySysUserList(ctx context.Context, in *QuerySysUserListReq, opts ...grpc.CallOption) (*QuerySysUserListResp, error)
}

type serviceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceClient(cc grpc.ClientConnInterface) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) AddSysUser(ctx context.Context, in *AddSysUserReq, opts ...grpc.CallOption) (*AddSysUserResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddSysUserResp)
	err := c.cc.Invoke(ctx, Service_AddSysUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DeleteSysUser(ctx context.Context, in *DeleteSysUserReq, opts ...grpc.CallOption) (*DeleteSysUserResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSysUserResp)
	err := c.cc.Invoke(ctx, Service_DeleteSysUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) UpdateSysUser(ctx context.Context, in *UpdateSysUserReq, opts ...grpc.CallOption) (*UpdateSysUserResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSysUserResp)
	err := c.cc.Invoke(ctx, Service_UpdateSysUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) UpdateSysUserStatus(ctx context.Context, in *UpdateSysUserStatusReq, opts ...grpc.CallOption) (*UpdateSysUserStatusResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSysUserStatusResp)
	err := c.cc.Invoke(ctx, Service_UpdateSysUserStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) QuerySysUserDetail(ctx context.Context, in *QuerySysUserDetailReq, opts ...grpc.CallOption) (*QuerySysUserDetailResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuerySysUserDetailResp)
	err := c.cc.Invoke(ctx, Service_QuerySysUserDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) QueryPageSysUserList(ctx context.Context, in *QueryPageSysUserListReq, opts ...grpc.CallOption) (*QueryPageSysUserListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryPageSysUserListResp)
	err := c.cc.Invoke(ctx, Service_QueryPageSysUserList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) QuerySysUserList(ctx context.Context, in *QuerySysUserListReq, opts ...grpc.CallOption) (*QuerySysUserListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuerySysUserListResp)
	err := c.cc.Invoke(ctx, Service_QuerySysUserList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceServer is the server API for Service service.
// All implementations must embed UnimplementedServiceServer
// for forward compatibility.
//
// 用户
type ServiceServer interface {
	// 添加用户
	AddSysUser(context.Context, *AddSysUserReq) (*AddSysUserResp, error)
	// 删除用户
	DeleteSysUser(context.Context, *DeleteSysUserReq) (*DeleteSysUserResp, error)
	// 更新用户
	UpdateSysUser(context.Context, *UpdateSysUserReq) (*UpdateSysUserResp, error)
	// 更新用户状态
	UpdateSysUserStatus(context.Context, *UpdateSysUserStatusReq) (*UpdateSysUserStatusResp, error)
	// 查询用户详情
	QuerySysUserDetail(context.Context, *QuerySysUserDetailReq) (*QuerySysUserDetailResp, error)
	// 查询用户分页列表
	QueryPageSysUserList(context.Context, *QueryPageSysUserListReq) (*QueryPageSysUserListResp, error)
	// 查询用户所有列表
	QuerySysUserList(context.Context, *QuerySysUserListReq) (*QuerySysUserListResp, error)
	mustEmbedUnimplementedServiceServer()
}

// UnimplementedServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedServiceServer struct{}

func (UnimplementedServiceServer) AddSysUser(context.Context, *AddSysUserReq) (*AddSysUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSysUser not implemented")
}
func (UnimplementedServiceServer) DeleteSysUser(context.Context, *DeleteSysUserReq) (*DeleteSysUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSysUser not implemented")
}
func (UnimplementedServiceServer) UpdateSysUser(context.Context, *UpdateSysUserReq) (*UpdateSysUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSysUser not implemented")
}
func (UnimplementedServiceServer) UpdateSysUserStatus(context.Context, *UpdateSysUserStatusReq) (*UpdateSysUserStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSysUserStatus not implemented")
}
func (UnimplementedServiceServer) QuerySysUserDetail(context.Context, *QuerySysUserDetailReq) (*QuerySysUserDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuerySysUserDetail not implemented")
}
func (UnimplementedServiceServer) QueryPageSysUserList(context.Context, *QueryPageSysUserListReq) (*QueryPageSysUserListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPageSysUserList not implemented")
}
func (UnimplementedServiceServer) QuerySysUserList(context.Context, *QuerySysUserListReq) (*QuerySysUserListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuerySysUserList not implemented")
}
func (UnimplementedServiceServer) mustEmbedUnimplementedServiceServer() {}
func (UnimplementedServiceServer) testEmbeddedByValue()                 {}

// UnsafeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceServer will
// result in compilation errors.
type UnsafeServiceServer interface {
	mustEmbedUnimplementedServiceServer()
}

func RegisterServiceServer(s grpc.ServiceRegistrar, srv ServiceServer) {
	// If the following call pancis, it indicates UnimplementedServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Service_ServiceDesc, srv)
}

func _Service_AddSysUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSysUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AddSysUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_AddSysUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AddSysUser(ctx, req.(*AddSysUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DeleteSysUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSysUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DeleteSysUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_DeleteSysUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DeleteSysUser(ctx, req.(*DeleteSysUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_UpdateSysUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSysUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).UpdateSysUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_UpdateSysUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).UpdateSysUser(ctx, req.(*UpdateSysUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_UpdateSysUserStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSysUserStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).UpdateSysUserStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_UpdateSysUserStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).UpdateSysUserStatus(ctx, req.(*UpdateSysUserStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_QuerySysUserDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySysUserDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).QuerySysUserDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_QuerySysUserDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).QuerySysUserDetail(ctx, req.(*QuerySysUserDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_QueryPageSysUserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPageSysUserListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).QueryPageSysUserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_QueryPageSysUserList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).QueryPageSysUserList(ctx, req.(*QueryPageSysUserListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_QuerySysUserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySysUserListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).QuerySysUserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_QuerySysUserList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).QuerySysUserList(ctx, req.(*QuerySysUserListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Service_ServiceDesc is the grpc.ServiceDesc for Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.member.rpc.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddSysUser",
			Handler:    _Service_AddSysUser_Handler,
		},
		{
			MethodName: "DeleteSysUser",
			Handler:    _Service_DeleteSysUser_Handler,
		},
		{
			MethodName: "UpdateSysUser",
			Handler:    _Service_UpdateSysUser_Handler,
		},
		{
			MethodName: "UpdateSysUserStatus",
			Handler:    _Service_UpdateSysUserStatus_Handler,
		},
		{
			MethodName: "QuerySysUserDetail",
			Handler:    _Service_QuerySysUserDetail_Handler,
		},
		{
			MethodName: "QueryPageSysUserList",
			Handler:    _Service_QueryPageSysUserList_Handler,
		},
		{
			MethodName: "QuerySysUserList",
			Handler:    _Service_QuerySysUserList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/rpc/main.proto",
}
