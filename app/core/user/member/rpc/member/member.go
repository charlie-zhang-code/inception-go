// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3
// Source: member.proto

package member

import (
	"context"

	"member/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AddMemberReq                      = pb.AddMemberReq
	AddMemberResp                     = pb.AddMemberResp
	AddMemberWithUsernamePasswordReq  = pb.AddMemberWithUsernamePasswordReq
	AddMemberWithUsernamePasswordResp = pb.AddMemberWithUsernamePasswordResp
	DeleteMemberReq                   = pb.DeleteMemberReq
	DeleteMemberResp                  = pb.DeleteMemberResp
	KeywordPageMemberListData         = pb.KeywordPageMemberListData
	PageMemberListData                = pb.PageMemberListData
	QueryKeywordPageMemberListReq     = pb.QueryKeywordPageMemberListReq
	QueryKeywordPageMemberListResp    = pb.QueryKeywordPageMemberListResp
	QueryMemberDetailByIdentifyReq    = pb.QueryMemberDetailByIdentifyReq
	QueryMemberDetailByIdentifyResp   = pb.QueryMemberDetailByIdentifyResp
	QueryMemberDetailByUsernameReq    = pb.QueryMemberDetailByUsernameReq
	QueryMemberDetailByUsernameResp   = pb.QueryMemberDetailByUsernameResp
	QueryMemberDetailReq              = pb.QueryMemberDetailReq
	QueryMemberDetailResp             = pb.QueryMemberDetailResp
	QueryPageMemberListReq            = pb.QueryPageMemberListReq
	QueryPageMemberListResp           = pb.QueryPageMemberListResp
	UpdateMemberReq                   = pb.UpdateMemberReq
	UpdateMemberResp                  = pb.UpdateMemberResp
	UpdateMemberStatusReq             = pb.UpdateMemberStatusReq
	UpdateMemberStatusResp            = pb.UpdateMemberStatusResp

	Member interface {
		// 添加用户
		AddMember(ctx context.Context, in *AddMemberReq, opts ...grpc.CallOption) (*AddMemberResp, error)
		// 添加用户
		AddMemberWithUsernamePassword(ctx context.Context, in *AddMemberWithUsernamePasswordReq, opts ...grpc.CallOption) (*AddMemberWithUsernamePasswordResp, error)
		// 删除用户
		DeleteMember(ctx context.Context, in *DeleteMemberReq, opts ...grpc.CallOption) (*DeleteMemberResp, error)
		// 更新用户
		UpdateMember(ctx context.Context, in *UpdateMemberReq, opts ...grpc.CallOption) (*UpdateMemberResp, error)
		// 更新用户状态
		UpdateMemberStatus(ctx context.Context, in *UpdateMemberStatusReq, opts ...grpc.CallOption) (*UpdateMemberStatusResp, error)
		// 查询用户详情（通过id）
		QueryMemberDetail(ctx context.Context, in *QueryMemberDetailReq, opts ...grpc.CallOption) (*QueryMemberDetailResp, error)
		// 查询用户详情（通过用户唯一标识）
		QueryMemberDetailByIdentify(ctx context.Context, in *QueryMemberDetailByIdentifyReq, opts ...grpc.CallOption) (*QueryMemberDetailByIdentifyResp, error)
		// 查询用户详情（通过用户名）
		QueryMemberDetailByUsername(ctx context.Context, in *QueryMemberDetailByUsernameReq, opts ...grpc.CallOption) (*QueryMemberDetailByUsernameResp, error)
		// 查询用户分页列表
		QueryPageMemberList(ctx context.Context, in *QueryPageMemberListReq, opts ...grpc.CallOption) (*QueryPageMemberListResp, error)
		// 查询关键字用户分页列表
		QueryKeywordPageMemberList(ctx context.Context, in *QueryKeywordPageMemberListReq, opts ...grpc.CallOption) (*QueryKeywordPageMemberListResp, error)
	}

	defaultMember struct {
		cli zrpc.Client
	}
)

func NewMember(cli zrpc.Client) Member {
	return &defaultMember{
		cli: cli,
	}
}

// 添加用户
func (m *defaultMember) AddMember(ctx context.Context, in *AddMemberReq, opts ...grpc.CallOption) (*AddMemberResp, error) {
	client := pb.NewMemberClient(m.cli.Conn())
	return client.AddMember(ctx, in, opts...)
}

// 添加用户
func (m *defaultMember) AddMemberWithUsernamePassword(ctx context.Context, in *AddMemberWithUsernamePasswordReq, opts ...grpc.CallOption) (*AddMemberWithUsernamePasswordResp, error) {
	client := pb.NewMemberClient(m.cli.Conn())
	return client.AddMemberWithUsernamePassword(ctx, in, opts...)
}

// 删除用户
func (m *defaultMember) DeleteMember(ctx context.Context, in *DeleteMemberReq, opts ...grpc.CallOption) (*DeleteMemberResp, error) {
	client := pb.NewMemberClient(m.cli.Conn())
	return client.DeleteMember(ctx, in, opts...)
}

// 更新用户
func (m *defaultMember) UpdateMember(ctx context.Context, in *UpdateMemberReq, opts ...grpc.CallOption) (*UpdateMemberResp, error) {
	client := pb.NewMemberClient(m.cli.Conn())
	return client.UpdateMember(ctx, in, opts...)
}

// 更新用户状态
func (m *defaultMember) UpdateMemberStatus(ctx context.Context, in *UpdateMemberStatusReq, opts ...grpc.CallOption) (*UpdateMemberStatusResp, error) {
	client := pb.NewMemberClient(m.cli.Conn())
	return client.UpdateMemberStatus(ctx, in, opts...)
}

// 查询用户详情（通过id）
func (m *defaultMember) QueryMemberDetail(ctx context.Context, in *QueryMemberDetailReq, opts ...grpc.CallOption) (*QueryMemberDetailResp, error) {
	client := pb.NewMemberClient(m.cli.Conn())
	return client.QueryMemberDetail(ctx, in, opts...)
}

// 查询用户详情（通过用户唯一标识）
func (m *defaultMember) QueryMemberDetailByIdentify(ctx context.Context, in *QueryMemberDetailByIdentifyReq, opts ...grpc.CallOption) (*QueryMemberDetailByIdentifyResp, error) {
	client := pb.NewMemberClient(m.cli.Conn())
	return client.QueryMemberDetailByIdentify(ctx, in, opts...)
}

// 查询用户详情（通过用户名）
func (m *defaultMember) QueryMemberDetailByUsername(ctx context.Context, in *QueryMemberDetailByUsernameReq, opts ...grpc.CallOption) (*QueryMemberDetailByUsernameResp, error) {
	client := pb.NewMemberClient(m.cli.Conn())
	return client.QueryMemberDetailByUsername(ctx, in, opts...)
}

// 查询用户分页列表
func (m *defaultMember) QueryPageMemberList(ctx context.Context, in *QueryPageMemberListReq, opts ...grpc.CallOption) (*QueryPageMemberListResp, error) {
	client := pb.NewMemberClient(m.cli.Conn())
	return client.QueryPageMemberList(ctx, in, opts...)
}

// 查询关键字用户分页列表
func (m *defaultMember) QueryKeywordPageMemberList(ctx context.Context, in *QueryKeywordPageMemberListReq, opts ...grpc.CallOption) (*QueryKeywordPageMemberListResp, error) {
	client := pb.NewMemberClient(m.cli.Conn())
	return client.QueryKeywordPageMemberList(ctx, in, opts...)
}
