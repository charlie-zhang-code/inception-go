// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3
// Source: role.proto

package server

import (
	"context"

	"role/rpc/internal/logic"
	"role/rpc/internal/svc"
	"role/rpc/pb"
)

type RoleServer struct {
	svcCtx *svc.ServiceContext
	pb.UnimplementedRoleServer
}

func NewRoleServer(svcCtx *svc.ServiceContext) *RoleServer {
	return &RoleServer{
		svcCtx: svcCtx,
	}
}

// 添加角色
func (s *RoleServer) AddRole(ctx context.Context, in *pb.AddRoleReq) (*pb.AddRoleResp, error) {
	l := logic.NewAddRoleLogic(ctx, s.svcCtx)
	return l.AddRole(in)
}

// 删除角色
func (s *RoleServer) DeleteRole(ctx context.Context, in *pb.DeleteRoleReq) (*pb.DeleteRoleResp, error) {
	l := logic.NewDeleteRoleLogic(ctx, s.svcCtx)
	return l.DeleteRole(in)
}

// 更新角色
func (s *RoleServer) UpdateRole(ctx context.Context, in *pb.UpdateRoleReq) (*pb.UpdateRoleResp, error) {
	l := logic.NewUpdateRoleLogic(ctx, s.svcCtx)
	return l.UpdateRole(in)
}

// 更新角色状态
func (s *RoleServer) UpdateRoleStatus(ctx context.Context, in *pb.UpdateRoleStatusReq) (*pb.UpdateRoleStatusResp, error) {
	l := logic.NewUpdateRoleStatusLogic(ctx, s.svcCtx)
	return l.UpdateRoleStatus(in)
}

// 查询角色详情
func (s *RoleServer) QueryRoleDetail(ctx context.Context, in *pb.QueryRoleDetailReq) (*pb.QueryRoleDetailResp, error) {
	l := logic.NewQueryRoleDetailLogic(ctx, s.svcCtx)
	return l.QueryRoleDetail(in)
}

// 查询角色分页列表
func (s *RoleServer) QueryPageRoleList(ctx context.Context, in *pb.QueryPageRoleListReq) (*pb.QueryPageRoleListResp, error) {
	l := logic.NewQueryPageRoleListLogic(ctx, s.svcCtx)
	return l.QueryPageRoleList(in)
}

// 查询关键字角色分页列表
func (s *RoleServer) QueryKeywordPageRoleList(ctx context.Context, in *pb.QueryKeywordPageRoleListReq) (*pb.QueryKeywordPageRoleListResp, error) {
	l := logic.NewQueryKeywordPageRoleListLogic(ctx, s.svcCtx)
	return l.QueryKeywordPageRoleList(in)
}
